name: Python Application AWS CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:    
  pull_request:
    branches:
      - main

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: karthikamn/flask-api-python-app
      SONAR_HOST_URL: ${{ secrets.SONAR_AWS_HOST_URL}}
      SONAR_TOKEN: ${{ secrets.SONAR_AWS_TOKEN}}
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE:${{ github.sha }} .
          docker tag $DOCKER_IMAGE:${{ github.sha }} $DOCKER_IMAGE:latest
      # Push the Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push $DOCKER_IMAGE:${{ github.sha }}
          docker push $DOCKER_IMAGE:latest
          
      # Run SonarQube scan
      - name: Official SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v3.0.0
        with:
          projectBaseDir: .
          args: >
           -Dsonar.projectKey=GithubProject1
           -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
           -Dsonar.login=${{ env.SONAR_TOKEN }}
           -Dsonar.working.directory=./.scannerwork
     
           
      - name: Print SonarQube Logs
        run: |
          ls -al .scannerwork
          cat .scannerwork/report-task.txt || echo "report-task.txt not found"

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master # Force to fail  step after specific time.
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_AWS_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_AWS_HOST_URL }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
           version: 'v1.24.0' # default is latest stable
        id: install
        
    


          
    
          
     
      
