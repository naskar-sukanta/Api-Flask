name: Python Application CI/CD with deploy to minikube

on:
  push:
    branches:
      - main
  workflow_dispatch:    
  pull_request:
    branches:
      - main


  
jobs:
  build-and-scan:
     runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: karthikamn/flask-api-python-app
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE:${{ github.sha }} .
          docker tag $DOCKER_IMAGE:${{ github.sha }} $DOCKER_IMAGE:latest

      # Push the Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push $DOCKER_IMAGE:${{ github.sha }}
          docker push $DOCKER_IMAGE:latest

      - name: Set Up Minikube (Local Testing)
        run: |
         minikube start
         kubectl config use-context minikube

      - name: Deploy to Minikube
        run: |
         kubectl create deployment my-app --image=$DOCKER_IMAGE:latest
         kubectl expose deployment my-app --type=NodePort --port=8080

      - name: Wait for Pod to be Ready
        run: |
         kubectl wait --for=condition=ready pod -l app=my-app --timeout=120s

      - name: Get Pod Status
        run: |
          kubectl get pods

      - name: Get Service Status
        run: |
         kubectl get svc

      - name: Get Pod Logs
        run: |
         kubectl logs $(kubectl get pods -l app=my-app -o jsonpath='{.items[0].metadata.name}')

 
      - name: Get Minikube Service URL
        run: |
         minikube service my-app --url
